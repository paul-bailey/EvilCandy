=========
EvilCandy
=========

----------------------------------------------
An Script Interpreter and Programming Language
----------------------------------------------

:Author: Paul Bailey <roscidcup@falstaffandme.com>
:Date: November 2022

**EvilCandy** is a(nother) object-oriented interpreted programming
language and interpreter.  The language itself is nothing original;
I cherry-picked some of my favorite syntactic features of Python
and JavaScript, but it looks mostly like JavaScript.  The real purpose
of the project is in the challenge of writing an interpreter.

So in that sense (see the all-caps part of COPYING), **EvilCandy**
is an *exercise*, not a shippable release candidate, not even an
alpha-phase candidate.

ISSUES, As of December 2023...
==============================

This project is still under initial development and neither the syntax
nor the implementation is at all stable.

* This project technically "works," but it's buggy and crashy as all hell.
  **For the love of god do not try to pitch this as an actual interpreter
  worth anyone's salt!**  I still get the occasional segfault when I hard
  test it with code.

* There is currently no interactive mode.  It prescans an entire file,
  converts it into byte code, then it executes the script.

* None of this is thread-proof, and very little of it is reentrant-proof.
  I've started hooks for a ``foreach`` object method, but the reentrance
  issues need to be fleshed out before I can implement it.

* Lots of recursion on the IRL stack is going on during prescan and
  assembly, since I'm using a recursive-descent parser for that stage.

* The current implementation of closures is hacky and unsatisfying.

* This does not do the most rigorous boundary checking for things like
  size-field boundary limits (if you're writing a token that's longer
  than 2**32 characters, you're a madman).

* I have thus far only ran this on Darwin ie. macOS, and compiled it with
  clang (pretending to be gcc).  I have not yet had the chance to test if
  there are any portability issues with GNU/Linux.  (I don't know what a
  Windows is, I think that's what they use in Shelbyville.)

* The library is practically non-existant at the moment, except for a
  few builtins that exists mainly to test that access to a builtin
  library even works.

Why Is It Called EvilCandy?
===========================

I wanted to call it CandyScript, but I looked it up and found out that
"Candy Script" was already the name of a popular typeface--if "popular
typeface" is a thing that can exist.  So I settled for EvilCandy.

The Language
============

:TODO: I will write this section, when the whole thing is better developed.

Some Rules
==========

Since this is a challenge, not a commercial product, here are some
rules to keep it interesting:

1. Implement it by hand--no yacc or bison.
2. Keep it as simple and clean as possible.  No cute preprocessor
   tricks or outsmart-the-compiler optimizations that try to take
   advantage of cosmic paradoxes or glitches in the Matrix or such.
   Keep the C code looking like C.

Licence
=======

See COPYING.

Developer
=========

:Author: Paul Bailey
:email: roscidcup@falstaffandme.com (be aware I never actually check this)
:website: blog_ (mostly non-technical stuff)
:Profession: Full-time dilettante

.. _blog: https://www.falstaffandme.com

.. : vim:set syntax=rst :

