Bugs
----

* BUGs 4/2025:

        * closures seem to only work in the simplest cases.  They do not
          work when referenced from a .foreach callback, and they do not
          seem to work when the declaration is at the file scope.  Strange
          and unpredictable behavior occurs in these cases.
        * ``(range(x)).foreach(y);`` works but ``range(x).foreach(y);``
          does not, though both should behave the same.
        * More of a flaw than a bug, but in TTY mode, 'if' and 'for'
          statements do not execute when the closing brace is received,
          because the parser needs to peek and check if there's an
          'else' statement.  So to execute the statement, a user would
          have to type an additional semicolon or else add the 'else'
          portion.
        * there's a VAR_INCR/DECR_REF imbalance somewhere, preventing
          some vars from getting deleted when they should.
        * Broke static typing.  This was intentional to get rid of the
          qop_mov way of assignment, but now it needs to be fixed.

Must Do
-------

* no need for ``var_cp`` after all, get rid of it.

* ``this`` keyword barely tested; it will probably break a lot of
  stuff that seems to work without it.

* Use autoconf, automake & cet., not just a hand-written Makefile

* Start adding in test scaffolding where possible.

* Figure out how to deal with duplicate or cyclic loads.  It can't just
  be a cache of path names, because the same path can be expressed in
  different ways.

* Fix the cyclic-reference problem in GC.

* MEMORY LEAK BUG:  When top-level expressions have been executed, their
  code arrays should be deleted.  Same for functions' code arrays if
  all references to them leave scope.  However, current GC implementation
  is too naive for this, deleting IIFEs before they can execute.  So for
  now, GC is turned off for all executable code, letting it zombify.

Library/Language Features
-------------------------

* Support the continue statement

* Add sets

* Add try/catch

* Add a Matrix/DSP module, something like NumPy for Python

* Support regular expressions

* Support complex numbers.

* Add debug module, make frames/code objects visible to user

* Add stdin and shell environment to Io module

Mebbe/Wishlist/Low-prio bugs
----------------------------

* Get rid of object_set_priv/object_get_priv.  It makes no sense for
  C code that's part of the compiled program to need this, when a new
  data class can be made.  Only EvilCandy user code needs dictionary
  types to create their own user-defined classes.

* Make FileType class and move general file stuff out of builtin/io.c

* Add way to mark current location while parsing, so that token.c and
  main.c aren't making their own separate and different error splashes.

* To cast an int to a float, user has to do something like
  ``x = 1.0 * x``.  Add something like ``float(x)`` and ``int(x)``
  instead.  Make these be keywords/instructions instead of built-in
  functions, to keep it fast.

* vm.c and types/function.c, as well as the structs they manipulate
  (vmframe_t, function_handle_t, executable_t) are very tangled up
  and require awkward back-and-forth calls between the two source
  files, esp. function_prep_frame and function_call.

* Replace jmp_buf in token.c with either fussier management of helper
  functions' return values, or with a big damn get_tok function.

* At assemble_eval() time, determine if certain expressions can be
  reduced to single consts known at assemble time.  Currently something
  like "1 + 2" will result in an operation at execution time instead
  of being compiled to just "3".  Big lift, basically means creating
  a parse tree BEFORE generating code.  We're currently doing these
  two tasks simultaneously.

* Preserve token buffer in interactive mode so that the UP arrow will
  recall previous expressions.

* Figure out how to de-chaos-ify and elegantize multiple inheritance
  without having to add a 'class' syntax.

* String data type encodes Unicode in utf-8, which is compact, but it
  makes for slower processing.  Instead do something like cpython, which
  has an array data-width variable in its meta-data.  C-string
  termination still works, so long as the right uint*_t type is used
  when checking for a value of zero.

.. : vim: set syntax=rst :
