#!./evilcandy
// Iterate a square root function over a range of 0 to a million.
// Change the IIFE arg between sqrt (the function below) and
// Math.sqrt, and time the execution of this program.
//
//  12/2023 Update:
//  ---------------
// The brain-dead sqrt algo below (or an in-Python-language
// equivalent) takes about 4s to complete on Python.  For evilcandy,
// now that the VM is running, it takes just under 8s, and (when my
// mac isn't lollygagging) sometimes even under 7s.  This is with
// the non-optimized per-instruction lookup table in vm.c (as opposed
// to Python's unreadable perversion of a switch statement in their
// ceval.c code, optimized up the wazoo with nonstandard arrays of
// goto labels).
//
// >50% the speed of Python is no longer embarrassing.  However,
// the speed of evilcandy is largely illusive, since it involves
// compiling with "-O3 -DNDEBUG"... something it's truly unprepared
// for.
//
//  11/2023 results:
//  ----------------
// For Math.sqrt, this takes about 0.88s (not bad).
// For the scripted algo below, this is ~55s, or ~20s
// when compiled with -O3 -DNDEBUG.
// It's a dumb algo, but that's not the problem...
// the same algo with Python3 still takes <4s.
// (Something's working right tho... the typeof() check at the
// start of each call only adds about 4% extra time.)
//
// I'm guessing the overhead of scope-frame handling is not
// the problem, because there doesn't seem to be a noticeable
// difference between for loops and while loops (the former
// having more gotos and an extra frame push).  So clearly
// what's mssing is more optimized byte code.

load "math.evc";

if (true) {
    let sqrt = function(x) {
        let y = 10.;
        let min = 0.;
        let max = 1000000.0;
        // we should raise exception if x<0,
        // but for this demo just return 0
        if (x <= 0.0)
            return 0.0;

        for_each(i, range(0, 20)) {
            let result = y * y;
            if (result > x) {
                max = y;
            } else if (result < x) {
                min = y;
                if (max < y)
                    max *= 2.0;
            } else if (result == x) {
                return y;
            }
            y = min + ((max - min) / 2.0);
            // print('{}: {}'.format(i, result));
        }
        return y;
    };
} else {
    let sqrt = function(x) {
        let y = 10.;
        let min = 0.;
        let max = 1000000.0;
        if (x <= 0.0)
            return 0.0;

        for (let i = 0; i < 20; i++) {
            let result = y * y;
            if (result > x) {
                max = y;
            } else if (result < x) {
                min = y;
                if (max < y)
                    max *= 2.0;
            } else if (result == x) {
                return y;
            }
            y = min + ((max - min) / 2.0);
        }
        return y;
    };
}

if (false) {
    (function(sqrt) {
        let x = 0.;
        for (let i = 0.; i < 1000000.0; i++)
            x = sqrt(i);
    })(sqrt);
} else if (false) {
    (function(sqrt) {
        (range(1000000)).foreach(function(v) {
            let x = sqrt(v);
        });
    })(sqrt);
} else {
    let i;
    for (i = 0.0; i < 50.0; i++)
        print("{} vs {}".format(sqrt(i), Math.sqrt(i)));
}


// : vim: set syntax=javascript :
