Bugs/Must-Do
------------

* Use autoconf, automake & cet., not just a hand-written Makefile

* Start adding in test scaffolding where possible.

* Support exceptions.  When in interactive mode, do not just throw an
  error and call exit() for user errors, instead do all the proper
  unwinding and prompt user for next input.  Only quit if its a script
  or if it's a system error like being out of memory.
  BIG LIFT, requires proper unwinding and heaps of jmp_bufs in each
  struct

* Support serialization to byte-code files, so we don't have to parse
  the same script every time.

* Support the continue statement

* Figure out how to deal with duplicate or cyclic loads.  It can't just
  be a cache of path names, because the same path can be expressed in
  different ways.

* Fix the cyclic-reference problem in GC.

* MEMORY LEAK BUG:  When top-level expressions have been executed, their
  executable code should be deleted.  Same for functions' executables
  when they leave scope, ie when their references go to zero.  However,
  current GC implementation is too naive for this, deleting IIFEs before
  they can execute.  So for now, GC is turned off for all executable
  code, letting it zombify.

Library/Language Features
-------------------------

* Add a Matrix/DSP module

* Support regular expressions

* Support complex numbers.

* Add debug module, make frames/code objects visible to user

* Add ability to disassemble during execution time

* Add stdin and shell environment to Io module

Mebbe/Wishlist
--------------

* At assemble_eval() time, determine if certain expressions can be
  reduced to single consts known at assemble time.  Currently something
  like "1 + 2" will result in an operation at execution time instead
  of being compiled to just "3".

* Make better distinction between syntax errors and other user errors
  (eg. array out of bounds, symbol not found...).  Currently syntax()
  is used for both.

* Preserve token buffer in interactive mode so that the UP arrow will
  recall previous expressions.

* Add "foreach" loop that resembles Python's "for" loop; this would be
  an alternative to the .foreach built-in method.

* Support use of newline to substitute for semicolon (BIG LIFT).

* Assembler.c is the "we have an AST at home" version of an abstract
  syntax tree.  Rewrite it from the ground up.

* Support a switch statement.  Even though it'll be no faster than
  an if-else-if block, switch statements are easier to read and
  therefore less buggy.

* Figure out how to de-chaos-ify and elegantize multiple inheritance
  without having to add a 'class' syntax.

* String data type encodes Unicode in utf-8, which is compact, but it
  makes for slower processing.  Instead do something like cpython, which
  has an array data-width variable in its meta-data.  C-string
  termination still works, so long as the right uint*_t type is used
  when checking for a value of zero.

.. : vim: set syntax=rst :
