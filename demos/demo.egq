#!./evilcandy
// Just some random stuff thrown in.  Most of it is meaningless.  It's
// left-over from when I was debugging the most basic features of the
// program.  I'm keeping it for now, because when refactoring code, its
// makes a useful, quick-and-dirty way to check if whatever changes I
// just made totally broke the program.

(function(iterator) {
    iterator['whoami'] = function() {
        print("me, of course!");
    };
    print('Expect: 4 to 9:');
    iterator.tonine(4);
    print('Expect: 2 to 10:');
    iterator.toten(2);
    print("Who am I?");
    iterator.whoami();
    print("length(iterator) is", length(iterator));
    print("iterator['✓'] is", iterator['✓']);
})((function (){
    let mkiter = function(stop) {
        return function(start) {
            print('\t', end='');
            for (i, range(start, stop)) {
                print(i, end=' ');
            }
            print('');
        };
    };

    return {
        tonine: mkiter(10),
        toten: mkiter(11),
        "✓": "check"
    };
})());

(function(Math) {
    print("Some mathy stuff:");
    print("\tpi is: %13.10f".format2(Math.pi));
    print("\te is:  %13.10f".format2(Math.e));
    (function(mypow) {
        print("\tMy Pow: 4^4 = {}".format(mypow(4, 4)));
    })(function(x, y) {
        if (typeof(x) != "integer" || typeof(y) != "integer")
            throw "wrong type!";

        // these are ints, so negative powers always
        // evaluate to zero.
        if (y <= 0)
            return 0;

        let res = x;
        while (y > 1) {
            res *= x;
            y--;
        }
        return res;
    });

    print("\tLib Pow: 4^4 =", Math.pow(4, 4));
    print("\tBuiltin Pow: 4^4 =", 4**4);
})(import("math.evc", "x"));

(function(s) {
    print("length '{}' for '{}'".format(length(s), s));
    print("Replace 'is' with 'at':");
    print("\tOld text: '{}'\n\tNew text: '{}'"
          .format(s, s.replace("is", "at")));
})('This is a string');

print("");
print("~0xfffffffffffffffa is {}".format(~0xfffffffffffffffa));
print("~0 is {}".format(~0));

{
    print("");
    print("Now here's a demo of foreach:");
    let prtypeof = function(o, str) {
        print("typeof(e) for each e in {}".format(str));
        // XXX need to add enumerate function
        let i = 0;
        for (k, o) {
            if (i && !(i & 3))
                print('');
            print('\t', typeof(o[k]), k, end='');
            i++;
        }
        print('');
    };
    prtypeof(__gbl__, "__gbl__");
    prtypeof(__gbl__._builtins, "__gbl__._builtins");
}

(function(ahasb) {
    ahasb(__gbl__, '__gbl__', 'MarioBros');
    ahasb(__gbl__, '__gbl__', '_builtins');
})(function (obj, objname, key) {
    print("Does", objname, "have child '{}'?".format(key));
    print("\t...", obj has key ? "yes!" : "no :(");
});

(function(**kw) {
    print("UTF-8/ANSI escape test");
    print("\tValues of", kw.beeta, "will give rise to dom!");
    let s = "Be \U0001f600!";
    print("\tLength of '{}' is {}, idx#3='{}', idx#4='{}'"
          .format(s, length(s), s[3], s[4]));
    print("\tAm I ", kw.COLOR_BLUE, 'BLUE', kw.COLOR_DEF, "???", sep="");
})(beeta='\u03b2', COLOR_BLUE='\e[36m', COLOR_DEF='\e[39m');

{
    let dbl_min = 2.2250738585072014e-308;
    let dbl_max = 1.7976931348623157e+308;
    print('Testing if float extremes can be parsed');
    print('\tDBL_MIN (2.2250738585072014e-308):');
    print('\t         ', dbl_min, sep='');
    print('\tDBL_MAX (1.7976931348623157e+308):');
    print('\t         ', dbl_max, sep='');
}

// : vim: set syntax=javascript :
