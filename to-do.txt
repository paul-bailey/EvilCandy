Bugs
----

* BUSs 6/2025:

        * "global x = ...something which causes error" is unpredictable
          whether x is declared or not after the exception is thrown.

* BUGs 5/2025:

        * Object mem leak, four not garbage-collected whenever there's a
          SyntaxError exception.  Other exceptions are fine.

* BUGs 4/2025:

        * All user-visible data types need a .cpmz method.

Must Do
-------

* Capabilities checklist before calling this a "feature complete" alpha.
  When this is complete I could start thinking about version numbers.

  - Fill in .create methods for remaining data types that need it.
  - Fill in math, cmath, io libraries
  - Fill in built-in methods for strings, arrays, etc.
  - Fill in __gbl__._sys
  - **done** Add ^^ to global vars as ``sys``, since it's already built up anyway
  - Add __gbl__._debug and let disassembly of functions be printable
    in interactive mode without the -d option
  - Finish path resolution
  - **done** Add ``===`` or ``is`` or both
  - **done** Add slice assignment
  - **done** Get prompt working
  - **done** Add support for deleting elements and global variables
  - Make consistent and accurate error reporting
  - Add an editline-like UI for interactive mode.

* Make dictionary iterable without requiring the creation of a new list.

* **done** Fix cyclic GC hazard in var_str() for lists and dictionaries, there's no
  reason why it should have to cause a fatal recursion error.

* If recursion error occurs during runtime (not load time), then unwind as
  if it was a normal exception; do not just panic and quit.

* **done** Make any/all/max/min be consistent with ``has`` w/r/t dictionaries.

* Replace ``has`` with ``in``, you're doing no one any favors by making
  up something new.

* **done** Make sure operator order follows either JavaScript or Python.

* Make sure all built-in types have a .cmpz method.

* Make sure all .cmpz methods match documentation.

* Make sure all .cmp methods behave correctly: <0 if a<b, 0 if a==b, ...

* Interactive mode problem: token state machine is created and destroyed
  by a wrapping call from assemble().  So if it's interactive mode and
  someone types "a = 1; b = 2;" all on the same line, the first part
  ("a = 1;") will be executed and the second part ("b = 2;") will be
  discarded and never parsed.

* Now that variadic functions are internally made into fixed-size
  functions, at least for user-defined functions, we can now get rid of
  the AP/FP distinction.

* ``demos`` folder is a joke.  Write a real suite of demos, split into
  two groups: demos that are indeed demos and present meaningful examples
  of the language; and demos that are either stress-tests or sanity
  tests, which can be run in one go to check things before pushing a
  commit onto the repository.

* ``this`` keyword barely tested; it will probably break a lot of
  stuff that seems to work without it.  Logically it should not work
  in the callback of a .foreach method, at least the way my program
  works at the moment.

* Start adding in test scaffolding where possible.

* Figure out how to deal with duplicate or cyclic loads.  It can't just
  be a cache of path names, because the same path can be expressed in
  different ways.

* Fix the cyclic-reference problem in GC.

Library/Language Features
-------------------------

* Parse UnicodeData.txt to make a Unicode version of ctype.h

* Support generators and comprehensions

* Add serial-port, socket libraries

* Add ``decorate`` method for dictionaries, so that user-defined objects
  can be added, anded, divided, etc.

* Add sets

* Support soft keywords

* Add a Matrix/DSP module, something like NumPy for Python

* ^^ also add Tensor module, why not?

* Support regular expressions

* Add debug module, make frames/code objects visible to user

* Add stdin and shell environment to Io module

* Add way to pass arguments to imported scripts, and a way for the
  script to access them.  Maybe a special identifier token like ``$0``.

* **done** Support f-strings

Mebbe/Wishlist/Low-prio bugs
----------------------------

* Use more sophisticated branching instructions for conditional tests,
  where "<true stmt> ||" or "<false stmt> &&" will skip runtime-evaluation
  of the remainder of the statement inside that atomic block.

* At assemble_post() time, reduce ternary operators to a single expression
  if the "a" of "a?b:c" is const.

* Replace stack arrangement of FOREACH_ITER to use an iterator of the
  sort used in var.c, any/all/max/min functions.  This ought to speed
  up the for loop a tiny bit, because instead of constantly operating
  on and replacing IntType objects, we're just incrementing C ints.

* Replace setjmp in assemble.c with normal stack unwinding.  May need
  to replace EOF with OC_EOF so that a <0 check will always mean
  'error'.

* Add way to mark current location while parsing, so that token.c and
  main.c aren't making their own separate and different error splashes.

* vm.c and types/function.c, as well as the structs they manipulate
  (vmframe_t, function_handle_t, executable_t) are very tangled up
  and require awkward back-and-forth calls between the two source
  files, esp. function_prep_frame and function_call.

* Replace jmp_buf in token.c with either fussier management of helper
  functions' return values, or with a big damn get_tok function.

* Preserve token buffer in interactive mode so that the UP arrow will
  recall previous expressions.

* **done** String data type encodes Unicode in utf-8, which is compact, but it
  makes for slower processing.  Instead do something like cpython, which
  has an array data-width variable in its meta-data.  C-string
  termination still works, so long as the right uint*_t type is used
  when checking for a value of zero.

.. : vim: set syntax=rst :
