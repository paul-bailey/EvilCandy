

let pow = function(x, y) {
    if (typeof(x) != "int" || typeof(y) != "int") {
        print("wrong type!");
        return 0.0;
    }
    if (y <= 0) {
        // these are ints, so negative powers always
        // evaluate to zero.
        return 0;
    }
    let res = x;
    while (y > 1) {
        res = res * x;
        y = y - 1;
    }
    return res;
};

let iterator = {
    tonine: function(x) {
        for (let n = 10; x < n; x++)
                print("\titerator.tonine: x is {}".format(x));
    },

    toten: function(x) {
        let n = 11;
        do {
            print("\titerator.toten: x is {}".format(x));
            x++;
        } while (x < n);
    }
};

iterator.whoami = function() {
    print("me, of course!");
};

print("pi is: {}".format(Math.pi));
iterator.tonine(4);
print("That was to nine. This is to ten:");
iterator.toten(4);
print("4^4 = {}".format(pow(4, 4)));
print("Who am I?");
iterator.whoami();

let s = "This is a string";
print("length '{}' for '{}'".format(s.len(), s));
print("iterator.len()=={}".format(iterator.len()));
print("length {} should equal {}".format(s.len(), len(s)));
print("Length of __gbl__ is {}".format(len()));

print("");
print("~0xfffffffffffffffa is {}".format(~0xfffffffffffffffa));

print("");
print("The 3rd character in '{}' is '{}'".format(s, s[2]));

print("");
print("Old text is '{}'\nNew text is '{}'".format(s, s.replace("is", "at")));

print("");
print("Now here's a test of foreach:");
print("I'm gonna print the typeof(e) for each e in __gbl__");
__gbl__.foreach(function (e) {
    print("\t" + typeof(e));
});

// : vim: set syntax=javascript :
