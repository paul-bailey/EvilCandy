Bugs/Must-Do
------------

* BUGs 4/2025:

        * TTY mode parses all-around unreliably, even though
          script mode seems to work just fine.
        * there's a refcount error somewhere, see output of
          test_def.egq
        * there's a VAR_INCR/DECR_REF imbalance somewhere, preventing
          some vars from getting deleted when they should.
        * var_bucket_delete() is somehow causing refcount to shrink
          below zero, meaning that variables are getting 'deleted'
          while still being claimed by a hash table.  This is hard to
          detect, since we're not calling free().
        * Calling "let" multiple times for the same name in the same
          namespace is failing throwing an error.

* Use autoconf, automake & cet., not just a hand-written Makefile

* Start adding in test scaffolding where possible.

* Support serialization to byte-code files.  Is it possible to do this
  for a language that supports anonymous functions and lambdas?  How
  do the code arrays link up when there is no name for them?  Create a
  UUID string or something?

* Support the continue statement

* Figure out how to deal with duplicate or cyclic loads.  It can't just
  be a cache of path names, because the same path can be expressed in
  different ways.

* Fix the cyclic-reference problem in GC.

* Add try/catch

* MEMORY LEAK BUG:  When top-level expressions have been executed, their
  code arrays should be deleted.  Same for functions' code arrays if
  all references to them leave scope.  However, current GC implementation
  is too naive for this, deleting IIFEs before they can execute.  So for
  now, GC is turned off for all executable code, letting it zombify.

Library/Language Features
-------------------------

* Add a Matrix/DSP module, something like NumPy for Python

* Support regular expressions

* Support complex numbers.

* Add debug module, make frames/code objects visible to user

* Add ability to disassemble during execution time

* Add stdin and shell environment to Io module

Mebbe/Wishlist/Low-prio bugs
----------------------------

* vm.c and types/function.c, as well as the structs they manipulate
  (vmframe_t, function_handle_t, executable_t) are very tangled up
  and require awkward back-and-forth calls between the two source
  files, esp. function_prep_frame and function_call.

* change object .len method to just be length of the object,
  since object's methods are no longer visible as global variables.

* Have all functions returning a var_t pointer never return
  NULL unless NULL is (at that stage) a non-error return value.
  An error return should be a pointer to RuntimeError.

* Clean up the mess w/r/t "recursion" in vm.c.  Esp. vm_reenter
  and do_call_func are soooo dirty.

* Consider using a (per-thread) global stack instead of a
  per-frame stack.  See comment in vm.c, do_call_func(), for
  a rationale.

* Support backslash-zero escape in string literals (moderate lift,
  most standard-library C-string functions cannot be used).

* Replace jmp_buf in token.c with either fussier management of helper
  functions' return values, or with a big damn get_tok function.

* If in interactive mode, do not automatically quit for detectable
  user errors in runtime.  Instead, do like at assemble time: throw
  an error message and then prompt user for the next input.

* At assemble_eval() time, determine if certain expressions can be
  reduced to single consts known at assemble time.  Currently something
  like "1 + 2" will result in an operation at execution time instead
  of being compiled to just "3".

* Make better distinction between syntax errors and other user errors
  (eg. array out of bounds, symbol not found...).  Currently syntax()
  is used for both.

* Preserve token buffer in interactive mode so that the UP arrow will
  recall previous expressions.

* Add "foreach" loop that resembles Python's "for" loop; this would be
  an alternative to the .foreach built-in method.

* Support use of newline to substitute for semicolon (BIG LIFT).

* Assembler.c is the "we have an AST at home" version of an abstract
  syntax tree.  Rewrite it from the ground up.

* Support a switch statement.  Even though it'll be no faster than
  an if-else-if block, switch statements are easier to read and
  therefore less buggy.

* Figure out how to de-chaos-ify and elegantize multiple inheritance
  without having to add a 'class' syntax.

* String data type encodes Unicode in utf-8, which is compact, but it
  makes for slower processing.  Instead do something like cpython, which
  has an array data-width variable in its meta-data.  C-string
  termination still works, so long as the right uint*_t type is used
  when checking for a value of zero.

.. : vim: set syntax=rst :
