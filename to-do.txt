* Fix problem with "break" w/r/t to "else" part of a "for-else" block
  (comment in assemble_for).  My choices are either to come up with a
  solution or to get rid of the "for-else" combination and have it be
  a simple "for" loop.

* Get rid of the by-reference policy on strings, it's probably not
  improving speed any but it's a nightmare to disclaim in Tutorial.txt.

* Start adding in test scaffolding where possible.

* Support the CRLF case for eol escapes in string literals.

* Support use of newline to substitute for semicolon (BIG LIFT).

* Support complex numbers.

* Support exceptions.  Don't just throw an error and call exit().

* Support stdin; don't require a file name arg

* Support interactive mode

* Support serialization to byte-code files

* Assembler.c is the "we have an AST at home" version of an abstract
  syntax tree.  Rewrite it from the ground up.

* Supprt the continue statement

* Support a switch statement.  Even though it'll be no faster than
  an if-else-if block, switch statements are easier to read and
  therefore less buggy.

* Figure out how to deal with duplicate or cyclic loads.  It can't just
  be a cache of path names, because the same path can be expressed the
  same way.

* Figure out how to de-chaos-ify and elegantize multiple inheritance
  without having to add a 'class' syntax.

* Fix the cyclic-reference problem in GC.
