=========
EvilCandy
=========

---------------------------------------------
A Script Interpreter and Programming Language
---------------------------------------------

:Author: Paul Bailey <roscidcup@falstaffandme.com>
:Date: April 2025

About
=====

**EvilCandy** is a(nother) object-oriented interpreted programming
language and interpreter.  The language itself is nothing original;
I cherry-picked some of my favorite syntactic features of Python
and JavaScript, and put them together in the same language.  That
may sound strange, like some Frankenstein's monster of a language,
but I took pains to adapt features that work naturally together.
I'd say that EvilCandy is JavaScript-like in its syntax and overall
appearance, as well as its slightly lambda-ish nature, but it is
Python-like in many of its basic data types, built-in functions, and
underlying machinery.  The real purpose of the project is in the
challenge of writing an interpreter and virtual machine, not
inventing a paradigm-changing language.

But despite being influenced by those languages, it is not either of
them, nor is it an off-brand version of them, like Octave to MATLAB,
or a lightweight 'embedded' version, like Cash to jQuery.  EvilCandy
immitates JavaScript and Python only as a starting point, but its
continuing development makes no effort to conform to them in any way.
In many ways, it diverges greatly.

Status
======

**UNSTABLE!!**  See disclaimer in COPYING.  As of April 2025, the
language and its implementation are under rapid development.  I spend
less time polishing and improving code, and more time either completely
refactoring the early-stage just-get-it-working kind of code or chasing
down extremely crashy bugs.  I am even still figuring out what I want for
certain language features, although it's getting to be less "how do I do
that" and more just philosophical conundrums like "do I really want that
feature?"

The version is currently 0.0.1, and I will not bother keeping that
up-to-date until the source tree has stabilized to a point where versions
are meaningful.

As of April 2025, the following can (roughly) be said about EvilCandy:

* It "works," but it still has elementary bugs that I keep logging
  and tracking down in to-do.txt.  (Just having a to-do.txt instead
  of bug tracking software should give you an idea how early-development
  this project is.)

* It parses an input, compiles it into binary code, then executes it
  in a virtual stack machine.  When debug hooks are turned off (which
  in truth it's not ready for), its speed is comparable to Python, at
  least on my computer.

* It can run in interactive mode, although it's a bit quirky; I haven't
  figured out a good solution to statements where the parser needs to
  "peek" at the next token, so if you type an "if" statement and do not
  intend to add and "else" statement, you need to type a superfluous
  semicolon to let the parser know to execute it...that kind of quirky.

* It can run in disassembly mode, where instead of executing code,
  it will disassemble its compiled input and print it.  Probably not
  useful to anybody but me, as a debugging tool.

* It can load and execute scripts, and have those scripts load and
  execute scripts.  However, I am not settled on its method for doing
  so.

* It has the skeleton of a math and IO library, but these are mainly
  as they were when I threw them together just to see if something works.

* I want to rewrite the parser before I finish some language basics.
  I have not yet decided on everything I want.  These include things
  like functions' keyword arguments vs. default arguments, policy
  regarding 'else' statement in a 'for' loop (I really want it, but
  it would be a bad idea to call it 'else')... that kind of stuff.

* It is single-threaded, and it will probably remain that way at least
  for a while.

* It is loaded with thrown-together code that needs refactoring and
  make-professional-ing.  There is not a lot of portability checking,
  for example, nor is there much rigorous boundary checking for things
  like values that are too big for the width of the variable that will
  store them.

* I have thus far only ran this on Darwin, and compiled it with...
  well I *think* it's gcc, but I think that clang and xcode like to
  lie and call themselves gcc and gmake, I'm not really sure.  But
  I have not yet done much to make it portable besides a recent
  migration out of my hand-typed Makefile to an automake-generated
  Makefile.

So no, EvilCandy is not a ship-able release candidate.

Some FAQ
========

Why Is It Called EvilCandy?
---------------------------

I wanted to call it CandyScript, but I found out that "Candy Script" was
already the name of a popular typeface--if "popular typeface" is a thing
that can exist.  So I settled for EvilCandy.

How Is It Different From JavaScript?
------------------------------------

In a nutshell, the resemblance between EvilCandy and JavaScript is mostly
cosmetic.  The biggest similarity is in the way functions can be pretty
much declared and defined anywhere.

Tutorial.rst details the syntax and functionality of the language.
But here are some major differences...

* All functions are anonymous.  They must be assigned to some variable
  to be accessed by a "name," otherwise they will go out of scope and
  disappear.  (Like with JS, this is useful for IIFEs.)

* There is no ``var`` keyword.  There are only ``let`` and ``global``.

* So far, there is no ``throw``.  However, I intend to add this in the
  future.

* The ``for`` loop may either be like JS's verbose C-like for-loop,
  or it may be like Python's eye-friendly for-loop. Depends on how it's
  expressed.  See documentation for details.  This also means that where
  speed is a concern, you can avoid the frame-swapping overhead that
  comes with an array's or dictionary's ``.foreach`` built-in method.

* EvilCandy has a ``range`` data-type like Python, to facilitate using
  the Python-like for-loop for general-purpose do-this-a-million-times
  iterating.

* EvilCandy is very dynamically typed.

* Most of EvilCandy's built-in methods were modeled after Python rather
  than JavaScript.  While writing this interpreter I was thinking about
  JavaScript while keeping an eye on some Python pocketbooks.  For
  example, ``join`` is a string method, not a list method.

* When I get to work on the module library (see Status_) I have no
  intention of trying to continue making it resemble JavaScript, which
  seems too heavily tailored for Web browsers to be a good model for
  EvilCandy.

* Some other examples of syntactic changes:

  * JavaScript's arrow notation, while cutely imitating the notation of
    lambda Calculus, is hard to read and even harder for an assembler to
    parse.  EvilCandy uses an entirely different notation for lambda
    functions.

  * I really like the ``else`` clause to Python's ``for`` loop, so I
    implemented a JavaScript/C-looking ``for`` loop that has an
    optional ``else`` statement.  (**But I might change it** because I
    have found that this feature is not as well-suited to JS-like syntax
    as it is to Python, considering how easy it is for a statement with
    no braces and misleading tabs to confuse a programmer where the
    program flow is actually going.)

  * Closures can be more explicitly declared

  * EvilCandy (currently) has nothing to do with the Document Object Model.

* EvilCandy is more bare-bones with its native types.  There is no
  ``class`` syntax, no ``thing.Prototype.Init`` or whatnot.  The use
  of IIFE's, closures, lambda, and functions that can return associative
  arrays, are all such elegant ways to create a user-defined class
  without actually calling it a class, that the other stuff just clutters
  the language up.


How Fast Is EvilCandy?
----------------------

As of December 2023 the project is in early development and hasn't been
tested much for speed.  The only testing I've done thus far is in
``demos/sqrt.egq``, a brute-force square root algorithm that iterates over
input values 1.0 to 1000000.0.  An equivalent algorithm in Python takes
about 4-5s to complete.  Ever since I got the VM (src/vm.c) working, my
own interpreter is roughly the same, 4-5s.

But one, that only speed-tests basic execution of assembled instructions.
It doesn't stress test any worst-case scenarios, like abusively long
lists or strings, large quantities of small variables, things like that.

And two, the Python-like speed is mostly an illusion. I could only get it
to run that fast when compiling ``-O3 -DNDEBUG``, which the program is
not ready for.  With all the debug hooks and bug traps left in, it's
about a third as fast.

Still, this is not embarrassing, and I'm quite proud of how fast it runs.

How Do I Compile?
-----------------

To compile the source tree as checked out of version control, you
need to reconfigure with

.. code::

        autoreconf -i
        ./configure

Then you type ``make`` in the command line.

Be aware that I have only ever compiled this on Darwin.  I have tried to
avoid system-specific functionality (uuid code is a little bit of a snag),
and I occasionally compile with ``-std=c17 -pedantic-errors``.  I'm trying
where possible to avoid gcc-specific extensions, but since clang seems to
call itself gcc, it's hard to tell if I'm succeeding.  Computers built in
Obscuresylvania or the 1970s probably will not execute this program
correctly.  It's hard to not accidentally make assumptions about a system
when you're the only developer on a project.  So I make no promise that it
will compile on your system, especially if it is a Windows system.

The Language
============

See Tutorial.rst

Licence
=======

See COPYING.

Developer
=========

:Author: Paul Bailey
:email: roscidcup@falstaffandme.com (be aware I never actually check this)
:website: blog_ (mostly non-technical stuff)
:Profession: Full-time dilettante

.. _blog: https://www.falstaffandme.com

.. : vim:set syntax=rst :

