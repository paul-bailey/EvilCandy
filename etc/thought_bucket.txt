Thought Bucket
==============

These are not bugs, though they may address design flaws.
Instead they are a more verbose version of to-do.txt.

Inheritance vs Encapsulation
----------------------------

:date: 2025-04-29

I've thought up two methods for one user class (or rather, a dictionary
that's being treated like a class) to inherit another.  One favors
the principle of inheritance greatly while the other favors encapulation
more.  I can't seem to get either to play nicely with each other.

Method 1 (Inheritance-friendly)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code::

        let new_class = base_constructor() | { /* new defs */ };

Here the dictionary union operator ``|`` bypasses the practice of
wrapping functions from one dictionary into a MethodType object before
putting them in another.  ``new_class`` will become the owner of any
function contained by the return value of ``base_constructor()``.

Superficially this looks beautifully elegant, since you could turn
multiple-inheritance into a single-line pipeline, but that's just an
illusion caused by its visual similarity to the Bourne shell.

The problem with it is that the base class may contain private data
whose names collide with ``new defs``.  The Python practice of "just
add underscores" is brain-dead, especially since that's probably what
``base_constructor()`` did too.

Method 2 (Encapsulation-friendly)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code::

        let new_class = { /* new defs */ } ^ base_constructor();

The carat ``^`` operator (which I am not set on) is a sort of pseudo
union.  It takes *only* the functions from ``base_constructor()``'s
return value, and it *does* wrap them in MethodType objects before
inserting them into the result.

The return value of ``base_constructor()`` was not assigned to a
user-accessible variable in this example, so it exists as untouchable
private data to the method objects stored in ``new_class``.  When it is
popped off the stack before the end of this line it will not be
garbage-collected, not until ``new_class`` goes out of scope.  This is
encapsulation at its purest!

The problem here is that although ``new_class``'s inherited methods can
access their own private data without conflicting with its uninherited
methods, there is no true interaction between the two groups of methods.

Unsolvable?
~~~~~~~~~~~

This might be the most frustrating problem of them all, just because
the very quality that makes each solution extremely elegant is also
putting the two so much at odds with each other that neither solution
can really work.  Most user-class definitions probably require a middle
ground between pure encapsulation and pure inheritance.

Rethinking Dictinaries
----------------------

:date: 2025-4-18

I'd rather destroy 'literal()' strings when parsing is done to free up
memory.

I'd also like to simplify the whole 'immortalization' of strings.
If .rodata is immortal(ish), and if hash tables stored keys as
struct var_t instead of C strings (and therefore let VAR_DECR_REF
bother over whether or not the C string is 'immortal'), then I
should not need to add the potentially memory-spamming ``literal_put``
call in ``object_setattr`` (see big comment there).

Either option below may mean getting rid of the fast ptr_hash and
pointer-compare callbacks for the symbol table.  One way to speed
things up is, since strings are now immutable, calculate hash on
string creation to speed up dictionary searches...esp. since half
the strings in a program are just reference-producing copies of
.rodata, so not a lot of hashing will go on anymore.

Option 1
~~~~~~~~

Have string.c's library contain its own 'immortalization' scheme
for C strings.  They have their own literal() hash table.  Callers
to ``stringvar_new`` pass flags telling what to do about its arg:

* copy it. It's a stack buffer or a token which had been literal'd
  the old way -- the way I'm trying to get rid of now.

* copy just the pointer. The C string has been allocated on the
  heap and calling code will hand it over to string lib for memory
  management going forward.

* (exclusive to above flags). Uniquify and immortalize.  If already
  exists and copy-the-pointer is set, free the arg's pointer. This

The 'uniquify' flag would be temporary if later I complete 'option
2', which may make immortalization unnecessary.

Option 2
~~~~~~~~

Have objects store keys (as struct var_t) as well as values.  Produce
a reference when inserting and consume a reference when deleting,
just as with values.  Needs re-thinking the whole hashtable library
for this project.

Steps:

#. Get rid of general-purpose lib/hashtable.h API and put it all
   in types/object.c

   a. Need temporary way to uniquify strings during parsing,
      maybe add ``object_uniq`` which sets a flag.

   b. Symbol table and built-in methods initialization and later
      look-ups need rethinking for this as well.

#. Make object.c's hash table insertion algorithm have a second
   bucket list of keys, which are inserted at the same index as
   the values.

#. Make object_XXXattr take struct var_t arguments instead of
   char pointers.

#. Make hash table destructor method pass keys and values.
   VAR_DECR_REF both.

#. When adding via object_setattr, can't know if key was from
   .rodata, so figuring out whether to produce or consume a
   reference is tricky here.  I think 'produce' but only if
   not replacing an already-existing entry (in which case the
   old key should be left alone in the table).  If the calling
   code created their arg or got it from the stack, they
   consume the reference regardless of what object_setattr
   did; if they got it from .rodata, do nothing to it.


struct executable_t as a variable
---------------------------------

:date: 2025-4-16

The Problem
~~~~~~~~~~~

There are three data types which ought to be only two: a
``FunctionType`` variable, a ``XptrType`` variable, and
``struct executable_t``, which ought to be embedded in the ``XptrType``
variable.  I was averse to doing this, because ``VAR_DECR_REF`` on
executable code could destroy it during a program that may call it
again.  Function variables are re-created dynamically during runtime,
but the executable code is generated only during parse/assembly time.

Why not have owning struct executable_t produce a reference for it?
```````````````````````````````````````````````````````````````````

Because the owning struct could go out of scope while the child
struct is still needed.  For example, an imported script could add a
function to the global symbol table, or return that function to the
calling script.  Its script-level executable code is out of scope,
but the wrapper script still needs the function's.

Why not have FunctionType variable produce a reference for it?
``````````````````````````````````````````````````````````````

IIFEs will be destroyed as soon as they're executed, and nested functions
will be destroyed as soon as their parent functions return.  Those parent
functions could be called again.

Why not have FunctionType variables **and** owning struct produce a reference for it?
`````````````````````````````````````````````````````````````````````````````````````

Took me long enough to figure that one out.  99% of the time, executable
code is immortal this way.  But it *will* clean up in the case of, for
example, the import call with mode set to 'x'.  If the imported script
added any function to the global symbol table, that function will still
have a reference to the code, and that code will have references to any
more code pointed at in its .rodata, so all good.

The Solution
~~~~~~~~~~~~

Big lift unfortunately, but embed ``struct executable_t`` into the
``XptrType`` struct (maybe change its name to ``XType`` since it's
not a 'pointer' in any sense to the user), and make sure that it
produces a reference for any other ``XptrType``'s in its .rodata.
(If there's a nested IIFE or such, that code will be pointed at
in its .rodata.)  Also produce a reference every time a
``FunctionType`` variable gets a handle to the code.


String Interning
----------------

:date: 2025-4-16

The Problem
~~~~~~~~~~~

Currently, all tokens are filtered through a de-duplicator function
``literal_put()``, something sort of like this.

.. code::

        // either returns a strdup or an already-existing copy
        token_buffer = literal_put(token_buffer);

``token_buffer`` here could be someting like ``"{"`` or ``"for"``.
There aren't a lot of these kinds of tokens to pile up in the immortalized
Literal table, ditto for lots frequently-chosen variable names like ``x``
or ``i``.  The only real pile-up is of string literals, which the tokenizer
adds interpreted versions of to the Literal table.

At assembly time, I want a debug message reporting something like
``received token '\012\033'`` -- ie how the script literally writes it --
instead of ``received token '`` followed by some non-printable
terminal-breaking garbage.  But I don't want to immortalize both the
interpreted *and* uninterpretd versions.

Solution
~~~~~~~~

1. Do not interpret string literals at the tokenize stage.  Only check
   backslashes to make sure that the end of the literal is truly the end
   of it and not an escaped quotation mark.

2. Have the assembler's creation of .rodata (see ``assemble_eval_atomic``)
   no longer call ``stringvar_new(this_token)`` but instead some new
   function like ``stringvar_from_token(this_token, true)``, where ``true``
   means "make immortal".

3. Have the immortalization of strings in ``stringvar_from_token`` use
   a different hashtable than ``literal``.

4. Have ``token_state_free`` then delete *its* literal table. (Maybe
   get rid of literal()'s global hash table, instead embed it in
   ``struct token_state_t``.

This will result in even fewer strings immortalized in memory, since
the majority of variable names are stack variables and are not needed
after assembly time.  Dictionary insertions should still immortalize
their keys (I'm not quite sure how to perfect that, since there's like
a 5% chance the key was constructed in runtime rather than expressed
literally in a source file).  But besides that, the only immortal strings
are those pointed at in a ``struct executable_t``'s ``.rodata`` array.

.. : vim: set syntax=rst :
